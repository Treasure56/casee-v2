<DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <button className="w-full flex items-center justify-between border border-zinc-200 rounded-md px-3 py-2 bg-white hover:bg-zinc-50 transition">
                      <span>{selectedModel.label}</span>
                      <LuChevronDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-full mt-2 rounded-md shadow-lg border border-zinc-200 bg-white">
                    {models.options.map((model) => (
                      <DropdownMenuItem
                        key={model.label}
                        className={cn(
                          "flex items-center text-sm gap-2 px-3 py-2 cursor-pointer transition-colors",
                          model.label === selectedModel.label
                            ? "bg-zinc-100 font-semibold"
                            : "hover:bg-zinc-50"
                        )}
                        onClick={() => setSelectedModel(model)}
                      >
                        <LuCheck
                          className={cn(
                            "mr-2 h-4 w-4 text-brand-primary transition-opacity",
                            model.label === selectedModel.label
                              ? "opacity-100"
                              : "opacity-0"
                          )}
                        />
                        {model.label}
                      </DropdownMenuItem>
                    ))}
                  </DropdownMenuContent>
                </DropdownMenu>



                



                import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";

<div className="space-y-2">
  <h3 className="text-base font-medium">
    {MATERIALS.name.slice(0, 1).toUpperCase() + MATERIALS.name.slice(1)}
  </h3>

  <RadioGroup
    value={options[MATERIALS.name]}
    onValueChange={(val) => {
      setOptions((prev) => ({
        ...prev,
        [MATERIALS.name]: val,
      }));
    }}
    className="grid gap-4"
  >
    {MATERIALS.options.map((option) => (
      <div
        key={option.value}
        className="flex items-center justify-between rounded-lg border-2 border-zinc-200 bg-white p-4 shadow-sm data-[state=checked]:border-primary"
      >
        <div className="flex items-start space-x-3">
          <RadioGroupItem
            value={option}
            id={`material-${option.value}`}
            className="mt-1"
          />
          <div className="space-y-1 text-sm">
            <label
              htmlFor={`material-${option.value}`}
              className="font-medium text-gray-900"
            >
              {option.label}
            </label>
            {option.description && (
              <p className="text-gray-500">{option.description}</p>
            )}
          </div>
        </div>
        <div className="text-sm font-medium text-gray-900">
          {formatPrice(option.price)}
        </div>
      </div>
    ))}
  </RadioGroup>
</div>
